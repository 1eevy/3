package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import(
	"unsafe"
	"github.com/mumax/3/cuda/cu"
	"sync"
)

// CUDA handle for llfreezespins kernel
var llfreezespins_code cu.Function

// Stores the arguments for llfreezespins kernel invocation
type llfreezespins_args_t struct{
	 arg_tx unsafe.Pointer
	 arg_ty unsafe.Pointer
	 arg_tz unsafe.Pointer
	 arg_frozenSpinsLUT unsafe.Pointer
	 arg_regions unsafe.Pointer
	 arg_N int
	 argptr [6]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for llfreezespins kernel invocation
var llfreezespins_args llfreezespins_args_t

func init(){
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	 llfreezespins_args.argptr[0] = unsafe.Pointer(&llfreezespins_args.arg_tx)
	 llfreezespins_args.argptr[1] = unsafe.Pointer(&llfreezespins_args.arg_ty)
	 llfreezespins_args.argptr[2] = unsafe.Pointer(&llfreezespins_args.arg_tz)
	 llfreezespins_args.argptr[3] = unsafe.Pointer(&llfreezespins_args.arg_frozenSpinsLUT)
	 llfreezespins_args.argptr[4] = unsafe.Pointer(&llfreezespins_args.arg_regions)
	 llfreezespins_args.argptr[5] = unsafe.Pointer(&llfreezespins_args.arg_N)
	 }

// Wrapper for llfreezespins CUDA kernel, asynchronous.
func k_llfreezespins_async ( tx unsafe.Pointer, ty unsafe.Pointer, tz unsafe.Pointer, frozenSpinsLUT unsafe.Pointer, regions unsafe.Pointer, N int,  cfg *config) {
	if Synchronous{ // debug
		Sync()
	}

	llfreezespins_args.Lock()
	defer llfreezespins_args.Unlock()

	if llfreezespins_code == 0{
		llfreezespins_code = fatbinLoad(llfreezespins_map, "llfreezespins")
	}

	 llfreezespins_args.arg_tx = tx
	 llfreezespins_args.arg_ty = ty
	 llfreezespins_args.arg_tz = tz
	 llfreezespins_args.arg_frozenSpinsLUT = frozenSpinsLUT
	 llfreezespins_args.arg_regions = regions
	 llfreezespins_args.arg_N = N
	

	args := llfreezespins_args.argptr[:]
	cu.LaunchKernel(llfreezespins_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous{ // debug
		Sync()
	}
}

// maps compute capability on PTX code for llfreezespins kernel.
var llfreezespins_map = map[int]string{ 0: "" ,
20: llfreezespins_ptx_20 ,
30: llfreezespins_ptx_30 ,
35: llfreezespins_ptx_35  }

// llfreezespins PTX code for various compute capabilities.
const(
  llfreezespins_ptx_20 = `
.version 4.1
.target sm_20
.address_size 64


.visible .entry llfreezespins(
	.param .u64 llfreezespins_param_0,
	.param .u64 llfreezespins_param_1,
	.param .u64 llfreezespins_param_2,
	.param .u64 llfreezespins_param_3,
	.param .u64 llfreezespins_param_4,
	.param .u32 llfreezespins_param_5
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<9>;
	.reg .f32 	%f<10>;
	.reg .s64 	%rd<20>;


	ld.param.u64 	%rd1, [llfreezespins_param_0];
	ld.param.u64 	%rd2, [llfreezespins_param_1];
	ld.param.u64 	%rd3, [llfreezespins_param_2];
	ld.param.u64 	%rd4, [llfreezespins_param_3];
	ld.param.u64 	%rd5, [llfreezespins_param_4];
	ld.param.u32 	%r2, [llfreezespins_param_5];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_2;

	cvta.to.global.u64 	%rd6, %rd4;
	cvta.to.global.u64 	%rd7, %rd5;
	cvta.to.global.u64 	%rd8, %rd3;
	cvta.to.global.u64 	%rd9, %rd2;
	cvta.to.global.u64 	%rd10, %rd1;
	cvt.s64.s32	%rd11, %r1;
	mul.wide.s32 	%rd12, %r1, 4;
	add.s64 	%rd13, %rd10, %rd12;
	add.s64 	%rd14, %rd9, %rd12;
	ld.global.f32 	%f1, [%rd14];
	add.s64 	%rd15, %rd8, %rd12;
	ld.global.f32 	%f2, [%rd15];
	add.s64 	%rd16, %rd7, %rd11;
	ld.global.u8 	%rd17, [%rd16];
	shl.b64 	%rd18, %rd17, 2;
	add.s64 	%rd19, %rd6, %rd18;
	ld.global.f32 	%f3, [%rd19];
	mov.f32 	%f4, 0f3F800000;
	sub.f32 	%f5, %f4, %f3;
	ld.global.f32 	%f6, [%rd13];
	mul.f32 	%f7, %f5, %f6;
	st.global.f32 	[%rd13], %f7;
	mul.f32 	%f8, %f5, %f1;
	st.global.f32 	[%rd14], %f8;
	mul.f32 	%f9, %f5, %f2;
	st.global.f32 	[%rd15], %f9;

BB0_2:
	ret;
}


`
   llfreezespins_ptx_30 = `
.version 4.1
.target sm_30
.address_size 64


.visible .entry llfreezespins(
	.param .u64 llfreezespins_param_0,
	.param .u64 llfreezespins_param_1,
	.param .u64 llfreezespins_param_2,
	.param .u64 llfreezespins_param_3,
	.param .u64 llfreezespins_param_4,
	.param .u32 llfreezespins_param_5
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<9>;
	.reg .f32 	%f<10>;
	.reg .s64 	%rd<20>;


	ld.param.u64 	%rd1, [llfreezespins_param_0];
	ld.param.u64 	%rd2, [llfreezespins_param_1];
	ld.param.u64 	%rd3, [llfreezespins_param_2];
	ld.param.u64 	%rd4, [llfreezespins_param_3];
	ld.param.u64 	%rd5, [llfreezespins_param_4];
	ld.param.u32 	%r2, [llfreezespins_param_5];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_2;

	cvta.to.global.u64 	%rd6, %rd4;
	cvta.to.global.u64 	%rd7, %rd5;
	cvta.to.global.u64 	%rd8, %rd3;
	cvta.to.global.u64 	%rd9, %rd2;
	cvta.to.global.u64 	%rd10, %rd1;
	cvt.s64.s32	%rd11, %r1;
	mul.wide.s32 	%rd12, %r1, 4;
	add.s64 	%rd13, %rd10, %rd12;
	add.s64 	%rd14, %rd9, %rd12;
	ld.global.f32 	%f1, [%rd14];
	add.s64 	%rd15, %rd8, %rd12;
	ld.global.f32 	%f2, [%rd15];
	add.s64 	%rd16, %rd7, %rd11;
	ld.global.u8 	%rd17, [%rd16];
	shl.b64 	%rd18, %rd17, 2;
	add.s64 	%rd19, %rd6, %rd18;
	ld.global.f32 	%f3, [%rd19];
	mov.f32 	%f4, 0f3F800000;
	sub.f32 	%f5, %f4, %f3;
	ld.global.f32 	%f6, [%rd13];
	mul.f32 	%f7, %f5, %f6;
	st.global.f32 	[%rd13], %f7;
	mul.f32 	%f8, %f5, %f1;
	st.global.f32 	[%rd14], %f8;
	mul.f32 	%f9, %f5, %f2;
	st.global.f32 	[%rd15], %f9;

BB0_2:
	ret;
}


`
   llfreezespins_ptx_35 = `
.version 4.1
.target sm_35
.address_size 64


.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.visible .entry llfreezespins(
	.param .u64 llfreezespins_param_0,
	.param .u64 llfreezespins_param_1,
	.param .u64 llfreezespins_param_2,
	.param .u64 llfreezespins_param_3,
	.param .u64 llfreezespins_param_4,
	.param .u32 llfreezespins_param_5
)
{
	.reg .pred 	%p<2>;
	.reg .s16 	%rs<2>;
	.reg .s32 	%r<9>;
	.reg .f32 	%f<10>;
	.reg .s64 	%rd<21>;


	ld.param.u64 	%rd1, [llfreezespins_param_0];
	ld.param.u64 	%rd2, [llfreezespins_param_1];
	ld.param.u64 	%rd3, [llfreezespins_param_2];
	ld.param.u64 	%rd4, [llfreezespins_param_3];
	ld.param.u64 	%rd5, [llfreezespins_param_4];
	ld.param.u32 	%r2, [llfreezespins_param_5];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB5_2;

	cvta.to.global.u64 	%rd6, %rd4;
	cvta.to.global.u64 	%rd7, %rd5;
	cvta.to.global.u64 	%rd8, %rd3;
	cvta.to.global.u64 	%rd9, %rd2;
	cvta.to.global.u64 	%rd10, %rd1;
	cvt.s64.s32	%rd11, %r1;
	mul.wide.s32 	%rd12, %r1, 4;
	add.s64 	%rd13, %rd10, %rd12;
	add.s64 	%rd14, %rd9, %rd12;
	ld.global.f32 	%f1, [%rd14];
	add.s64 	%rd15, %rd8, %rd12;
	ld.global.f32 	%f2, [%rd15];
	add.s64 	%rd16, %rd7, %rd11;
	ld.global.nc.u8 	%rs1, [%rd16];
	cvt.u64.u16	%rd17, %rs1;
	and.b64  	%rd18, %rd17, 255;
	shl.b64 	%rd19, %rd18, 2;
	add.s64 	%rd20, %rd6, %rd19;
	ld.global.nc.f32 	%f3, [%rd20];
	mov.f32 	%f4, 0f3F800000;
	sub.f32 	%f5, %f4, %f3;
	ld.global.f32 	%f6, [%rd13];
	mul.f32 	%f7, %f5, %f6;
	st.global.f32 	[%rd13], %f7;
	mul.f32 	%f8, %f5, %f1;
	st.global.f32 	[%rd14], %f8;
	mul.f32 	%f9, %f5, %f2;
	st.global.f32 	[%rd15], %f9;

BB5_2:
	ret;
}


`
 )
